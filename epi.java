import java.sql.*;
import java.util.Scanner;
import java.time.LocalDate;

/**
 * Sistema de Controle de EPIs (Equipamentos de Prote√ß√£o Individual)
 *
 * Este sistema permite gerenciar:
 * - Cadastro de EPIs
 * - Cadastro de Funcion√°rios
 * - Controle de empr√©stimos e devolu√ß√µes
 * - Gera√ß√£o de relat√≥rios
 *
 * Melhorias implementadas:
 * 1. Coment√°rios detalhados em todas as fun√ß√µes
 * 2. Valida√ß√£o de entradas do usu√°rio
 * 3. Tratamento de erros aprimorado
 * 4. Interface mais amig√°vel
 * 5. Funcionalidades adicionais como verifica√ß√£o de validade de EPIs
 */
class ControleEPI {
    // Configura√ß√µes de conex√£o com o banco de dados
    private static final String URL = "jdbc:mysql://localhost:3306/controle_epi";
    private static final String USUARIO = "root";
    private static final String SENHA = ""; // Altere para sua senha

    // Cores para melhorar a interface (ANSI escape codes)
    private static final String RESET = "\u001B[0m";
    private static final String VERDE = "\u001B[32m";
    private static final String VERMELHO = "\u001B[31m";
    private static final String AZUL = "\u001B[34m";
    private static final String AMARELO = "\u001B[33m";
    private static final String CIANO = "\u001B[36m";

    /**
     * M√©todo principal que inicia o sistema
     */
    public static void main(String[] args) {
        exibirBannerInicial();
        testarConexao();
        menuPrincipal();
    }

    /**
     * Exibe um banner inicial com informa√ß√µes do sistema
     */
    private static void exibirBannerInicial() {
        System.out.println(CIANO + "==============================================");
        System.out.println("       SISTEMA DE CONTROLE DE EPIs v2.0");
        System.out.println("==============================================" + RESET);
        System.out.println("Desenvolvido para gest√£o de Equipamentos de");
        System.out.println("Prote√ß√£o Individual em conformidade com normas");
        System.out.println("de seguran√ßa do trabalho");
        System.out.println(CIANO + "==============================================" + RESET);
    }

    /**
     * Testa a conex√£o com o banco de dados
     * Exibe mensagem de sucesso ou erro e encerra o sistema em caso de falha
     */
    public static void testarConexao() {
        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA)) {
            System.out.println(VERDE + "\n‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!" + RESET);
        } catch (SQLException e) {
            System.err.println(VERMELHO + "\n‚ùå Falha na conex√£o com o banco de dados: " + e.getMessage() + RESET);
            System.err.println("Verifique se:");
            System.err.println("1. O MySQL est√° rodando");
            System.err.println("2. O banco 'controle_epi' existe");
            System.err.println("3. As credenciais est√£o corretas no c√≥digo");
            System.exit(1); // Encerra o programa com c√≥digo de erro
        }
    }

    /**
     * Menu principal do sistema com op√ß√µes numeradas
     */
    public static void menuPrincipal() {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n" + AZUL + "===== MENU PRINCIPAL =====" + RESET);
            System.out.println("1. üì¶ Gerenciar EPIs");
            System.out.println("2. üë• Gerenciar Funcion√°rios");
            System.out.println("3. üîÑ Gerenciar Empr√©stimos");
            System.out.println("4. ‚Ü©Ô∏è Registrar Devolu√ß√£o");
            System.out.println("5. üìä Relat√≥rios");
            System.out.println("6. ‚è≥ Verificar EPIs pr√≥ximos da validade");
            System.out.println("0. üö™ Sair");
            System.out.print(AMARELO + "Escolha uma op√ß√£o: " + RESET);

            try {
                int opcao = scanner.nextInt();
                scanner.nextLine(); // Limpar buffer

                switch (opcao) {
                    case 1:
                        menuEPI(scanner);
                        break;
                    case 2:
                        menuFuncionario(scanner);
                        break;
                    case 3:
                        menuEmprestimo(scanner);
                        break;
                    case 4:
                        registrarDevolucao(scanner);
                        break;
                    case 5:
                        menuRelatorios(scanner);
                        break;
                    case 6:
                        verificarEPIsProximosValidade();
                        break;
                    case 0:
                        System.out.println(VERDE + "\nSaindo do sistema... Obrigado por utilizar!" + RESET);
                        scanner.close();
                        System.exit(0);
                    default:
                        System.out.println(VERMELHO + "Op√ß√£o inv√°lida! Por favor, tente novamente." + RESET);
                }
            } catch (Exception e) {
                System.out.println(VERMELHO + "Entrada inv√°lida! Digite um n√∫mero correspondente √†s op√ß√µes." + RESET);
                scanner.nextLine(); // Limpa o buffer em caso de erro
            }
        }
    }

    /**
     * Menu de gerenciamento de EPIs
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void menuEPI(Scanner scanner) {
        while (true) {
            System.out.println("\n" + AZUL + "===== GERENCIAMENTO DE EPIs =====" + RESET);
            System.out.println("1. ‚ûï Cadastrar novo EPI");
            System.out.println("2. üìã Listar todos os EPIs");
            System.out.println("3. üîç Buscar EPI por ID");
            System.out.println("4. ‚úèÔ∏è Atualizar EPI");
            System.out.println("5. ‚ùå Remover EPI");
            System.out.println("6. ‚ö†Ô∏è Ver EPIs vencidos");
            System.out.println("0. ‚Ü©Ô∏è Voltar ao menu principal");
            System.out.print(AMARELO + "Escolha uma op√ß√£o: " + RESET);

            try {
                int opcao = scanner.nextInt();
                scanner.nextLine(); // Limpar buffer

                switch (opcao) {
                    case 1:
                        cadastrarEPI(scanner);
                        break;
                    case 2:
                        listarEPIs();
                        break;
                    case 3:
                        buscarEPIPorId(scanner);
                        break;
                    case 4:
                        atualizarEPI(scanner);
                        break;
                    case 5:
                        removerEPI(scanner);
                        break;
                    case 6:
                        listarEPIsVencidos();
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println(VERMELHO + "Op√ß√£o inv√°lida!" + RESET);
                }
            } catch (Exception e) {
                System.out.println(VERMELHO + "Entrada inv√°lida! Digite um n√∫mero." + RESET);
                scanner.nextLine();
            }
        }
    }

    /**
     * Menu de gerenciamento de funcion√°rios
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void menuFuncionario(Scanner scanner) {
        while (true) {
            System.out.println("\n" + AZUL + "===== GERENCIAMENTO DE FUNCION√ÅRIOS =====" + RESET);
            System.out.println("1. ‚ûï Cadastrar novo funcion√°rio");
            System.out.println("2. üìã Listar todos os funcion√°rios");
            System.out.println("3. üîç Buscar funcion√°rio por ID");
            System.out.println("4. ‚úèÔ∏è Atualizar funcion√°rio");
            System.out.println("5. ‚ùå Remover funcion√°rio");
            System.out.println("0. ‚Ü©Ô∏è Voltar ao menu principal");
            System.out.print(AMARELO + "Escolha uma op√ß√£o: " + RESET);

            try {
                int opcao = scanner.nextInt();
                scanner.nextLine(); // Limpar buffer

                switch (opcao) {
                    case 1:
                        cadastrarFuncionario(scanner);
                        break;
                    case 2:
                        listarFuncionarios();
                        break;
                    case 3:
                        buscarFuncionarioPorId(scanner);
                        break;
                    case 4:
                        atualizarFuncionario(scanner);
                        break;
                    case 5:
                        removerFuncionario(scanner);
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println(VERMELHO + "Op√ß√£o inv√°lida!" + RESET);
                }
            } catch (Exception e) {
                System.out.println(VERMELHO + "Entrada inv√°lida! Digite um n√∫mero." + RESET);
                scanner.nextLine();
            }
        }
    }

    /**
     * Menu de gerenciamento de empr√©stimos
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void menuEmprestimo(Scanner scanner) {
        while (true) {
            System.out.println("\n" + AZUL + "===== GERENCIAMENTO DE EMPR√âSTIMOS =====" + RESET);
            System.out.println("1. ‚ûï Registrar novo empr√©stimo");
            System.out.println("2. üìã Listar todos os empr√©stimos");
            System.out.println("3. üîç Buscar empr√©stimo por ID");
            System.out.println("4. ‚úÖ Listar empr√©stimos ativos");
            System.out.println("5. ‚è≥ Listar empr√©stimos pr√≥ximos do vencimento");
            System.out.println("0. ‚Ü©Ô∏è Voltar ao menu principal");
            System.out.print(AMARELO + "Escolha uma op√ß√£o: " + RESET);

            try {
                int opcao = scanner.nextInt();
                scanner.nextLine(); // Limpar buffer

                switch (opcao) {
                    case 1:
                        registrarEmprestimo(scanner);
                        break;
                    case 2:
                        listarEmprestimos();
                        break;
                    case 3:
                        buscarEmprestimoPorId(scanner);
                        break;
                    case 4:
                        listarEmprestimosAtivos();
                        break;
                    case 5:
                        listarEmprestimosProximosVencimento();
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println(VERMELHO + "Op√ß√£o inv√°lida!" + RESET);
                }
            } catch (Exception e) {
                System.out.println(VERMELHO + "Entrada inv√°lida! Digite um n√∫mero." + RESET);
                scanner.nextLine();
            }
        }
    }

    /**
     * Menu de relat√≥rios
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void menuRelatorios(Scanner scanner) {
        while (true) {
            System.out.println("\n" + AZUL + "===== RELAT√ìRIOS =====" + RESET);
            System.out.println("1. üì¶ EPIs dispon√≠veis");
            System.out.println("2. üöÄ EPIs emprestados");
            System.out.println("3. üë§ Hist√≥rico de empr√©stimos por funcion√°rio");
            System.out.println("4. üì¶ Hist√≥rico de empr√©stimos por EPI");
            System.out.println("5. ‚è≥ EPIs com validade expirando em 30 dias");
            System.out.println("0. ‚Ü©Ô∏è Voltar ao menu principal");
            System.out.print(AMARELO + "Escolha uma op√ß√£o: " + RESET);

            try {
                int opcao = scanner.nextInt();
                scanner.nextLine(); // Limpar buffer

                switch (opcao) {
                    case 1:
                        listarEPIsDisponiveis();
                        break;
                    case 2:
                        listarEPIsEmprestados();
                        break;
                    case 3:
                        historicoEmprestimosPorFuncionario(scanner);
                        break;
                    case 4:
                        historicoEmprestimosPorEPI(scanner);
                        break;
                    case 5:
                        verificarEPIsProximosValidade();
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println(VERMELHO + "Op√ß√£o inv√°lida!" + RESET);
                }
            } catch (Exception e) {
                System.out.println(VERMELHO + "Entrada inv√°lida! Digite um n√∫mero." + RESET);
                scanner.nextLine();
            }
        }
    }

    // ========== M√âTODOS PARA EPIs ==========

    /**
     * Cadastra um novo EPI no sistema
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void cadastrarEPI(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- CADASTRAR NOVO EPI ---" + RESET);

        try {
            System.out.print("Nome do EPI: ");
            String nome = scanner.nextLine();

            if (nome.isEmpty()) {
                System.out.println(VERMELHO + "O nome do EPI n√£o pode estar vazio!" + RESET);
                return;
            }

            System.out.print("Descri√ß√£o: ");
            String descricao = scanner.nextLine();

            System.out.print("Data de validade (AAAA-MM-DD): ");
            String validade = scanner.nextLine();

            // Valida√ß√£o simples da data
            if (!validade.matches("\\d{4}-\\d{2}-\\d{2}")) {
                System.out.println(VERMELHO + "Formato de data inv√°lido! Use AAAA-MM-DD." + RESET);
                return;
            }

            System.out.print("Quantidade em estoque: ");
            int quantidade = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            if (quantidade < 0) {
                System.out.println(VERMELHO + "A quantidade n√£o pode ser negativa!" + RESET);
                return;
            }

            // Verifica se o EPI j√° existe
            if (epiExiste(nome)) {
                System.out.println(AMARELO + "Este EPI j√° est√° cadastrado. Deseja adicionar mais unidades? (S/N)" + RESET);
                String resposta = scanner.nextLine();

                if (resposta.equalsIgnoreCase("S")) {
                    adicionarEstoqueEPI(nome, quantidade);
                    return;
                } else {
                    System.out.println("Opera√ß√£o cancelada.");
                    return;
                }
            }

            String sql = "INSERT INTO epi (nome, descricao, validade, quantidade) VALUES (?, ?, ?, ?)";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

                stmt.setString(1, nome);
                stmt.setString(2, descricao);
                stmt.setString(3, validade);
                stmt.setInt(4, quantidade);
                stmt.executeUpdate();

                // Recupera o ID gerado
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        System.out.println(VERDE + "EPI cadastrado com sucesso! ID: " + generatedKeys.getInt(1) + RESET);
                    } else {
                        System.out.println(VERDE + "EPI cadastrado com sucesso!" + RESET);
                    }
                }
            } catch (SQLException e) {
                System.err.println(VERMELHO + "Erro ao cadastrar EPI: " + e.getMessage() + RESET);
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Entrada inv√°lida! Por favor, tente novamente." + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Lista todos os EPIs cadastrados no sistema
     */
    public static void listarEPIs() {
        System.out.println("\n" + AZUL + "--- LISTA DE EPIs ---" + RESET);
        String sql = "SELECT * FROM epi ORDER BY nome";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-30s %-20s %-15s %-10s%n", "ID", "Nome", "Descri√ß√£o", "Validade", "Quantidade");
            System.out.println("--------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                String descricao = rs.getString("descricao");
                Date validade = rs.getDate("validade");
                int quantidade = rs.getInt("quantidade");

                // Verifica se o EPI est√° vencido
                LocalDate hoje = LocalDate.now();
                LocalDate dataValidade = validade.toLocalDate();
                String statusValidade = dataValidade.isBefore(hoje) ? VERMELHO + "VENCIDO" + RESET : VERDE + "OK" + RESET;

                System.out.printf("%-5d %-30s %-20s %-15s %-10d %s%n",
                        id, nome, descricao, validade, quantidade, statusValidade);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar EPIs: " + e.getMessage() + RESET);
        }
    }

    /**
     * Busca um EPI espec√≠fico pelo seu ID
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void buscarEPIPorId(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- BUSCAR EPI POR ID ---" + RESET);
        System.out.print("Digite o ID do EPI: ");

        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            String sql = "SELECT * FROM epi WHERE id = ?";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {

                stmt.setInt(1, id);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    System.out.println("\n" + AZUL + "DETALHES DO EPI:" + RESET);
                    System.out.println("ID: " + rs.getInt("id"));
                    System.out.println("Nome: " + rs.getString("nome"));
                    System.out.println("Descri√ß√£o: " + rs.getString("descricao"));

                    Date validade = rs.getDate("validade");
                    LocalDate hoje = LocalDate.now();
                    LocalDate dataValidade = validade.toLocalDate();

                    if (dataValidade.isBefore(hoje)) {
                        System.out.println("Validade: " + validade + " " + VERMELHO + "(VENCIDO)" + RESET);
                    } else if (dataValidade.isBefore(hoje.plusDays(30))) {
                        System.out.println("Validade: " + validade + " " + AMARELO + "(PR√ìXIMO DO VENCIMENTO)" + RESET);
                    } else {
                        System.out.println("Validade: " + validade + " " + VERDE + "(DENTRO DO PRAZO)" + RESET);
                    }

                    System.out.println("Quantidade: " + rs.getInt("quantidade"));

                    // Mostra hist√≥rico de empr√©stimos para este EPI
                    System.out.println("\n" + AZUL + "√öLTIMOS EMPR√âSTIMOS:" + RESET);
                    historicoEmprestimosPorEPI(id);
                } else {
                    System.out.println(VERMELHO + "EPI n√£o encontrado com o ID: " + id + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "ID inv√°lido! Digite um n√∫mero." + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Atualiza os dados de um EPI existente
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void atualizarEPI(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- ATUALIZAR EPI ---" + RESET);
        System.out.print("Digite o ID do EPI que deseja atualizar: ");

        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            // Primeiro verifica se o EPI existe
            if (!epiExiste(id)) {
                System.out.println(VERMELHO + "EPI n√£o encontrado com o ID: " + id + RESET);
                return;
            }

            System.out.print("Novo nome do EPI (deixe em branco para n√£o alterar): ");
            String nome = scanner.nextLine();

            System.out.print("Nova descri√ß√£o (deixe em branco para n√£o alterar): ");
            String descricao = scanner.nextLine();

            System.out.print("Nova data de validade (AAAA-MM-DD) (deixe em branco para n√£o alterar): ");
            String validadeStr = scanner.nextLine();
            Date validade = null;

            if (!validadeStr.isEmpty()) {
                if (!validadeStr.matches("\\d{4}-\\d{2}-\\d{2}")) {
                    System.out.println(VERMELHO + "Formato de data inv√°lido! Use AAAA-MM-DD." + RESET);
                    return;
                }
                validade = Date.valueOf(validadeStr);
            }

            System.out.print("Nova quantidade em estoque (digite -1 para n√£o alterar): ");
            int quantidade = scanner.nextInt();
            scanner.nextLine();

            // Construir a query dinamicamente com base nos campos que ser√£o atualizados
            StringBuilder sql = new StringBuilder("UPDATE epi SET ");
            boolean temCampoParaAtualizar = false;

            if (!nome.isEmpty()) {
                sql.append("nome = ?, ");
                temCampoParaAtualizar = true;
            }
            if (!descricao.isEmpty()) {
                sql.append("descricao = ?, ");
                temCampoParaAtualizar = true;
            }
            if (validade != null) {
                sql.append("validade = ?, ");
                temCampoParaAtualizar = true;
            }
            if (quantidade != -1) {
                sql.append("quantidade = ?, ");
                temCampoParaAtualizar = true;
            }

            if (!temCampoParaAtualizar) {
                System.out.println(AMARELO + "Nenhum campo foi alterado." + RESET);
                return;
            }

            // Remove a √∫ltima v√≠rgula e espa√ßo
            sql.delete(sql.length() - 2, sql.length());
            sql.append(" WHERE id = ?");

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql.toString())) {

                int paramIndex = 1;

                if (!nome.isEmpty()) {
                    stmt.setString(paramIndex++, nome);
                }
                if (!descricao.isEmpty()) {
                    stmt.setString(paramIndex++, descricao);
                }
                if (validade != null) {
                    stmt.setDate(paramIndex++, validade);
                }
                if (quantidade != -1) {
                    stmt.setInt(paramIndex++, quantidade);
                }

                stmt.setInt(paramIndex, id);

                int linhasAfetadas = stmt.executeUpdate();

                if (linhasAfetadas > 0) {
                    System.out.println(VERDE + "EPI atualizado com sucesso!" + RESET);
                } else {
                    System.out.println(VERMELHO + "Nenhum EPI foi atualizado." + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Erro ao atualizar EPI: " + e.getMessage() + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Remove um EPI do sistema
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void removerEPI(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- REMOVER EPI ---" + RESET);
        System.out.print("Digite o ID do EPI que deseja remover: ");

        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            // Verifica se o EPI existe
            if (!epiExiste(id)) {
                System.out.println(VERMELHO + "EPI n√£o encontrado com o ID: " + id + RESET);
                return;
            }

            // Verifica se h√° empr√©stimos ativos para este EPI
            if (temEmprestimosAtivos(id)) {
                System.out.println(VERMELHO + "N√£o √© poss√≠vel remover este EPI pois existem empr√©stimos ativos relacionados a ele." + RESET);
                return;
            }

            System.out.print(VERMELHO + "Tem certeza que deseja remover este EPI? (S/N): " + RESET);
            String confirmacao = scanner.nextLine();

            if (!confirmacao.equalsIgnoreCase("S")) {
                System.out.println("Opera√ß√£o cancelada.");
                return;
            }

            String sql = "DELETE FROM epi WHERE id = ?";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {

                stmt.setInt(1, id);
                int linhasAfetadas = stmt.executeUpdate();

                if (linhasAfetadas > 0) {
                    System.out.println(VERDE + "EPI removido com sucesso!" + RESET);
                } else {
                    System.out.println(VERMELHO + "Nenhum EPI foi removido." + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Erro ao remover EPI: " + e.getMessage() + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Lista EPIs que est√£o vencidos
     */
    public static void listarEPIsVencidos() {
        System.out.println("\n" + AZUL + "--- EPIs VENCIDOS ---" + RESET);
        String sql = "SELECT * FROM epi WHERE validade < CURDATE() ORDER BY validade";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-30s %-15s %-10s%n", "ID", "Nome", "Validade", "Quantidade");
            System.out.println("------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                Date validade = rs.getDate("validade");
                int quantidade = rs.getInt("quantidade");

                System.out.printf("%-5d %-30s %-15s %-10d %s%n",
                        id, nome, validade, quantidade, VERMELHO + "VENCIDO" + RESET);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar EPIs vencidos: " + e.getMessage() + RESET);
        }
    }

    /**
     * Verifica se um EPI existe pelo ID
     * @param id ID do EPI
     * @return true se existe, false caso contr√°rio
     */
    private static boolean epiExiste(int id) {
        String sql = "SELECT 1 FROM epi WHERE id = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar EPI: " + e.getMessage() + RESET);
            return false;
        }
    }

    /**
     * Verifica se um EPI existe pelo nome
     * @param nome Nome do EPI
     * @return true se existe, false caso contr√°rio
     */
    private static boolean epiExiste(String nome) {
        String sql = "SELECT 1 FROM epi WHERE nome = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setString(1, nome);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar EPI: " + e.getMessage() + RESET);
            return false;
        }
    }

    /**
     * Verifica se h√° empr√©stimos ativos para um EPI
     * @param idEpi ID do EPI
     * @return true se h√° empr√©stimos ativos, false caso contr√°rio
     */
    private static boolean temEmprestimosAtivos(int idEpi) {
        String sql = "SELECT 1 FROM emprestimo WHERE id_epi = ? AND status = 'Ativo'";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idEpi);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar empr√©stimos: " + e.getMessage() + RESET);
            return true; // Assume que h√° empr√©stimos para evitar remo√ß√£o acidental
        }
    }

    /**
     * Adiciona estoque a um EPI existente
     * @param nome Nome do EPI
     * @param quantidade Quantidade a ser adicionada
     */
    private static void adicionarEstoqueEPI(String nome, int quantidade) {
        String sql = "UPDATE epi SET quantidade = quantidade + ? WHERE nome = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, quantidade);
            stmt.setString(2, nome);
            int linhasAfetadas = stmt.executeUpdate();

            if (linhasAfetadas > 0) {
                System.out.println(VERDE + "Estoque atualizado com sucesso!" + RESET);
            } else {
                System.out.println(VERMELHO + "Falha ao atualizar estoque." + RESET);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao atualizar estoque: " + e.getMessage() + RESET);
        }
    }

    // ========== M√âTODOS PARA FUNCION√ÅRIOS ==========

    /**
     * Cadastra um novo funcion√°rio no sistema
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void cadastrarFuncionario(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- CADASTRAR NOVO FUNCION√ÅRIO ---" + RESET);

        try {
            System.out.print("Nome do funcion√°rio: ");
            String nome = scanner.nextLine();

            if (nome.isEmpty()) {
                System.out.println(VERMELHO + "O nome n√£o pode estar vazio!" + RESET);
                return;
            }

            System.out.print("CPF (somente n√∫meros): ");
            String cpf = scanner.nextLine();

            // Valida√ß√£o simples de CPF
            if (!cpf.matches("\\d{11}")) {
                System.out.println(VERMELHO + "CPF inv√°lido! Deve conter 11 d√≠gitos." + RESET);
                return;
            }

            // Verifica se CPF j√° est√° cadastrado
            if (cpfExiste(cpf)) {
                System.out.println(VERMELHO + "Este CPF j√° est√° cadastrado no sistema!" + RESET);
                return;
            }

            System.out.print("Cargo: ");
            String cargo = scanner.nextLine();

            System.out.print("Departamento: ");
            String departamento = scanner.nextLine();

            String sql = "INSERT INTO funcionario (nome, cpf, cargo, departamento) VALUES (?, ?, ?, ?)";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

                stmt.setString(1, nome);
                stmt.setString(2, cpf);
                stmt.setString(3, cargo);
                stmt.setString(4, departamento);
                stmt.executeUpdate();

                // Recupera o ID gerado
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        System.out.println(VERDE + "Funcion√°rio cadastrado com sucesso! ID: " + generatedKeys.getInt(1) + RESET);
                    } else {
                        System.out.println(VERDE + "Funcion√°rio cadastrado com sucesso!" + RESET);
                    }
                }
            } catch (SQLException e) {
                System.err.println(VERMELHO + "Erro ao cadastrar funcion√°rio: " + e.getMessage() + RESET);
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Erro ao cadastrar funcion√°rio: " + e.getMessage() + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Lista todos os funcion√°rios cadastrados no sistema
     */
    public static void listarFuncionarios() {
        System.out.println("\n" + AZUL + "--- LISTA DE FUNCION√ÅRIOS ---" + RESET);
        String sql = "SELECT * FROM funcionario ORDER BY nome";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-30s %-15s %-20s %-15s%n", "ID", "Nome", "CPF", "Cargo", "Departamento");
            System.out.println("--------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                String cpf = rs.getString("cpf");
                String cargo = rs.getString("cargo");
                String departamento = rs.getString("departamento");

                // Formata o CPF para exibi√ß√£o
                String cpfFormatado = cpf.replaceFirst("(\\d{3})(\\d{3})(\\d{3})(\\d{2})", "$1.$2.$3-$4");

                System.out.printf("%-5d %-30s %-15s %-20s %-15s%n", id, nome, cpfFormatado, cargo, departamento);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar funcion√°rios: " + e.getMessage() + RESET);
        }
    }

    /**
     * Busca um funcion√°rio espec√≠fico pelo seu ID
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void buscarFuncionarioPorId(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- BUSCAR FUNCION√ÅRIO POR ID ---" + RESET);
        System.out.print("Digite o ID do funcion√°rio: ");

        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            String sql = "SELECT * FROM funcionario WHERE id = ?";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {

                stmt.setInt(1, id);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    System.out.println("\n" + AZUL + "DETALHES DO FUNCION√ÅRIO:" + RESET);
                    System.out.println("ID: " + rs.getInt("id"));
                    System.out.println("Nome: " + rs.getString("nome"));

                    // Formata o CPF para exibi√ß√£o
                    String cpf = rs.getString("cpf");
                    String cpfFormatado = cpf.replaceFirst("(\\d{3})(\\d{3})(\\d{3})(\\d{2})", "$1.$2.$3-$4");
                    System.out.println("CPF: " + cpfFormatado);

                    System.out.println("Cargo: " + rs.getString("cargo"));
                    System.out.println("Departamento: " + rs.getString("departamento"));

                    // Mostra hist√≥rico de empr√©stimos para este funcion√°rio
                    System.out.println("\n" + AZUL + "√öLTIMOS EMPR√âSTIMOS:" + RESET);
                    historicoEmprestimosPorFuncionario(id);
                } else {
                    System.out.println(VERMELHO + "Funcion√°rio n√£o encontrado com o ID: " + id + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "ID inv√°lido! Digite um n√∫mero." + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Atualiza os dados de um funcion√°rio existente
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void atualizarFuncionario(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- ATUALIZAR FUNCION√ÅRIO ---" + RESET);
        System.out.print("Digite o ID do funcion√°rio que deseja atualizar: ");

        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            // Primeiro verifica se o funcion√°rio existe
            if (!funcionarioExiste(id)) {
                System.out.println(VERMELHO + "Funcion√°rio n√£o encontrado com o ID: " + id + RESET);
                return;
            }

            System.out.print("Novo nome (deixe em branco para n√£o alterar): ");
            String nome = scanner.nextLine();

            System.out.print("Novo CPF (deixe em branco para n√£o alterar): ");
            String cpf = scanner.nextLine();

            if (!cpf.isEmpty() && !cpf.matches("\\d{11}")) {
                System.out.println(VERMELHO + "CPF inv√°lido! Deve conter 11 d√≠gitos." + RESET);
                return;
            }

            System.out.print("Novo cargo (deixe em branco para n√£o alterar): ");
            String cargo = scanner.nextLine();

            System.out.print("Novo departamento (deixe em branco para n√£o alterar): ");
            String departamento = scanner.nextLine();

            // Construir a query dinamicamente com base nos campos que ser√£o atualizados
            StringBuilder sql = new StringBuilder("UPDATE funcionario SET ");
            boolean temCampoParaAtualizar = false;

            if (!nome.isEmpty()) {
                sql.append("nome = ?, ");
                temCampoParaAtualizar = true;
            }
            if (!cpf.isEmpty()) {
                sql.append("cpf = ?, ");
                temCampoParaAtualizar = true;
            }
            if (!cargo.isEmpty()) {
                sql.append("cargo = ?, ");
                temCampoParaAtualizar = true;
            }
            if (!departamento.isEmpty()) {
                sql.append("departamento = ?, ");
                temCampoParaAtualizar = true;
            }

            if (!temCampoParaAtualizar) {
                System.out.println(AMARELO + "Nenhum campo foi alterado." + RESET);
                return;
            }

            // Remove a √∫ltima v√≠rgula e espa√ßo
            sql.delete(sql.length() - 2, sql.length());
            sql.append(" WHERE id = ?");

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql.toString())) {

                int paramIndex = 1;

                if (!nome.isEmpty()) {
                    stmt.setString(paramIndex++, nome);
                }
                if (!cpf.isEmpty()) {
                    stmt.setString(paramIndex++, cpf);
                }
                if (!cargo.isEmpty()) {
                    stmt.setString(paramIndex++, cargo);
                }
                if (!departamento.isEmpty()) {
                    stmt.setString(paramIndex++, departamento);
                }

                stmt.setInt(paramIndex, id);

                int linhasAfetadas = stmt.executeUpdate();

                if (linhasAfetadas > 0) {
                    System.out.println(VERDE + "Funcion√°rio atualizado com sucesso!" + RESET);
                } else {
                    System.out.println(VERMELHO + "Nenhum funcion√°rio foi atualizado." + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Erro ao atualizar funcion√°rio: " + e.getMessage() + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Remove um funcion√°rio do sistema
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void removerFuncionario(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- REMOVER FUNCION√ÅRIO ---" + RESET);
        System.out.print("Digite o ID do funcion√°rio que deseja remover: ");

        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            // Verifica se o funcion√°rio existe
            if (!funcionarioExiste(id)) {
                System.out.println(VERMELHO + "Funcion√°rio n√£o encontrado com o ID: " + id + RESET);
                return;
            }

            // Verifica se h√° empr√©stimos ativos para este funcion√°rio
            if (temEmprestimosAtivosFuncionario(id)) {
                System.out.println(VERMELHO + "N√£o √© poss√≠vel remover este funcion√°rio pois existem empr√©stimos ativos relacionados a ele." + RESET);
                return;
            }

            System.out.print(VERMELHO + "Tem certeza que deseja remover este funcion√°rio? (S/N): " + RESET);
            String confirmacao = scanner.nextLine();

            if (!confirmacao.equalsIgnoreCase("S")) {
                System.out.println("Opera√ß√£o cancelada.");
                return;
            }

            String sql = "DELETE FROM funcionario WHERE id = ?";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {

                stmt.setInt(1, id);
                int linhasAfetadas = stmt.executeUpdate();

                if (linhasAfetadas > 0) {
                    System.out.println(VERDE + "Funcion√°rio removido com sucesso!" + RESET);
                } else {
                    System.out.println(VERMELHO + "Nenhum funcion√°rio foi removido." + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Erro ao remover funcion√°rio: " + e.getMessage() + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Verifica se um funcion√°rio existe pelo ID
     * @param id ID do funcion√°rio
     * @return true se existe, false caso contr√°rio
     */
    private static boolean funcionarioExiste(int id) {
        String sql = "SELECT 1 FROM funcionario WHERE id = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar funcion√°rio: " + e.getMessage() + RESET);
            return false;
        }
    }

    /**
     * Verifica se um CPF j√° est√° cadastrado
     * @param cpf CPF a ser verificado
     * @return true se existe, false caso contr√°rio
     */
    private static boolean cpfExiste(String cpf) {
        String sql = "SELECT 1 FROM funcionario WHERE cpf = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setString(1, cpf);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar CPF: " + e.getMessage() + RESET);
            return true; // Assume que existe para evitar duplica√ß√£o
        }
    }

    /**
     * Verifica se h√° empr√©stimos ativos para um funcion√°rio
     * @param idFuncionario ID do funcion√°rio
     * @return true se h√° empr√©stimos ativos, false caso contr√°rio
     */
    private static boolean temEmprestimosAtivosFuncionario(int idFuncionario) {
        String sql = "SELECT 1 FROM emprestimo WHERE id_funcionario = ? AND status = 'Ativo'";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idFuncionario);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar empr√©stimos: " + e.getMessage() + RESET);
            return true; // Assume que h√° empr√©stimos para evitar remo√ß√£o acidental
        }
    }

    // ========== M√âTODOS PARA EMPR√âSTIMOS ==========

    /**
     * Registra um novo empr√©stimo de EPI para um funcion√°rio
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void registrarEmprestimo(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- REGISTRAR NOVO EMPR√âSTIMO ---" + RESET);

        try {
            // Listar funcion√°rios dispon√≠veis
            System.out.println("\n" + AZUL + "FUNCION√ÅRIOS DISPON√çVEIS:" + RESET);
            listarFuncionarios();

            System.out.print("\nDigite o ID do funcion√°rio: ");
            int idFuncionario = scanner.nextInt();
            scanner.nextLine();

            // Verifica se o funcion√°rio existe
            if (!funcionarioExiste(idFuncionario)) {
                System.out.println(VERMELHO + "Funcion√°rio n√£o encontrado!" + RESET);
                return;
            }

            // Listar EPIs dispon√≠veis
            System.out.println("\n" + AZUL + "EPIs DISPON√çVEIS:" + RESET);
            listarEPIsDisponiveis();

            System.out.print("\nDigite o ID do EPI: ");
            int idEPI = scanner.nextInt();
            scanner.nextLine();

            // Verifica se o EPI existe
            if (!epiExiste(idEPI)) {
                System.out.println(VERMELHO + "EPI n√£o encontrado!" + RESET);
                return;
            }

            System.out.print("Quantidade: ");
            int quantidade = scanner.nextInt();
            scanner.nextLine();

            if (quantidade <= 0) {
                System.out.println(VERMELHO + "A quantidade deve ser maior que zero!" + RESET);
                return;
            }

            // Verificar se h√° quantidade suficiente e se o EPI est√° dentro da validade
            if (!verificarQuantidadeDisponivel(idEPI, quantidade)) {
                System.out.println(VERMELHO + "Quantidade indispon√≠vel para empr√©stimo!" + RESET);
                return;
            }

            if (epiVencido(idEPI)) {
                System.out.println(VERMELHO + "Este EPI est√° vencido e n√£o pode ser emprestado!" + RESET);
                return;
            }

            LocalDate dataAtual = LocalDate.now();
            LocalDate dataDevolucaoPrevista = dataAtual.plusDays(30); // 30 dias para devolu√ß√£o

            String sql = "INSERT INTO emprestimo (id_funcionario, id_epi, data_emprestimo, " +
                    "data_devolucao_prevista, quantidade, status) VALUES (?, ?, ?, ?, ?, ?)";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

                stmt.setInt(1, idFuncionario);
                stmt.setInt(2, idEPI);
                stmt.setString(3, dataAtual.toString());
                stmt.setString(4, dataDevolucaoPrevista.toString());
                stmt.setInt(5, quantidade);
                stmt.setString(6, "Ativo");
                stmt.executeUpdate();

                // Atualizar estoque do EPI
                atualizarEstoqueEPI(idEPI, -quantidade);

                // Recupera o ID gerado
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        System.out.println(VERDE + "Empr√©stimo registrado com sucesso! N√∫mero: " + generatedKeys.getInt(1) + RESET);
                    } else {
                        System.out.println(VERDE + "Empr√©stimo registrado com sucesso!" + RESET);
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Erro ao registrar empr√©stimo: " + e.getMessage() + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Verifica se h√° quantidade suficiente de um EPI para empr√©stimo
     * @param idEPI ID do EPI
     * @param quantidade Quantidade desejada
     * @return true se h√° quantidade suficiente, false caso contr√°rio
     */
    private static boolean verificarQuantidadeDisponivel(int idEPI, int quantidade) {
        String sql = "SELECT quantidade, validade FROM epi WHERE id = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idEPI);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                int quantidadeDisponivel = rs.getInt("quantidade");
                Date validade = rs.getDate("validade");

                // Verifica se o EPI est√° vencido
                LocalDate hoje = LocalDate.now();
                if (validade.toLocalDate().isBefore(hoje)) {
                    return false;
                }

                return quantidadeDisponivel >= quantidade;
            }
            return false;
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar quantidade dispon√≠vel: " + e.getMessage() + RESET);
            return false;
        }
    }

    /**
     * Verifica se um EPI est√° vencido
     * @param idEPI ID do EPI
     * @return true se est√° vencido, false caso contr√°rio
     */
    private static boolean epiVencido(int idEPI) {
        String sql = "SELECT validade FROM epi WHERE id = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idEPI);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                Date validade = rs.getDate("validade");
                LocalDate hoje = LocalDate.now();
                return validade.toLocalDate().isBefore(hoje);
            }
            return false;
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar validade do EPI: " + e.getMessage() + RESET);
            return true; // Assume que est√° vencido para evitar empr√©stimo
        }
    }

    /**
     * Atualiza o estoque de um EPI
     * @param idEPI ID do EPI
     * @param quantidade Quantidade a ser adicionada (pode ser negativa)
     */
    private static void atualizarEstoqueEPI(int idEPI, int quantidade) {
        String sql = "UPDATE epi SET quantidade = quantidade + ? WHERE id = ?";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, quantidade);
            stmt.setInt(2, idEPI);
            stmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao atualizar estoque do EPI: " + e.getMessage() + RESET);
        }
    }

    /**
     * Lista todos os empr√©stimos registrados no sistema
     */
    public static void listarEmprestimos() {
        System.out.println("\n" + AZUL + "--- LISTA DE EMPR√âSTIMOS ---" + RESET);
        String sql = "SELECT e.id, f.nome AS funcionario, ep.nome AS epi, e.data_emprestimo, " +
                "e.data_devolucao_prevista, e.data_devolucao_real, e.quantidade, e.status " +
                "FROM emprestimo e " +
                "JOIN funcionario f ON e.id_funcionario = f.id " +
                "JOIN epi ep ON e.id_epi = ep.id " +
                "ORDER BY e.data_emprestimo DESC";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-20s %-20s %-15s %-20s %-20s %-10s %-10s%n",
                    "ID", "Funcion√°rio", "EPI", "Data Empr√©stimo", "Devolu√ß√£o Prevista",
                    "Devolu√ß√£o Real", "Quantidade", "Status");
            System.out.println("----------------------------------------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String funcionario = rs.getString("funcionario");
                String epi = rs.getString("epi");
                Date dataEmprestimo = rs.getDate("data_emprestimo");
                Date dataDevolucaoPrevista = rs.getDate("data_devolucao_prevista");
                Date dataDevolucaoReal = rs.getDate("data_devolucao_real");
                int quantidade = rs.getInt("quantidade");
                String status = rs.getString("status");

                // Formata o status com cores
                String statusFormatado = status.equals("Ativo") ? VERDE + status + RESET : CIANO + status + RESET;

                System.out.printf("%-5d %-20s %-20s %-15s %-20s %-20s %-10d %-10s%n",
                        id, funcionario, epi, dataEmprestimo, dataDevolucaoPrevista,
                        dataDevolucaoReal != null ? dataDevolucaoReal : "N/A", quantidade, statusFormatado);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar empr√©stimos: " + e.getMessage() + RESET);
        }
    }

    /**
     * Busca um empr√©stimo espec√≠fico pelo seu ID
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void buscarEmprestimoPorId(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- BUSCAR EMPR√âSTIMO POR ID ---" + RESET);
        System.out.print("Digite o ID do empr√©stimo: ");

        try {
            int id = scanner.nextInt();
            scanner.nextLine();

            String sql = "SELECT e.id, f.nome AS funcionario, ep.nome AS epi, e.data_emprestimo, " +
                    "e.data_devolucao_prevista, e.data_devolucao_real, e.quantidade, e.status " +
                    "FROM emprestimo e " +
                    "JOIN funcionario f ON e.id_funcionario = f.id " +
                    "JOIN epi ep ON e.id_epi = ep.id " +
                    "WHERE e.id = ?";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {

                stmt.setInt(1, id);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    System.out.println("\n" + AZUL + "DETALHES DO EMPR√âSTIMO:" + RESET);
                    System.out.println("N√∫mero: " + rs.getInt("id"));
                    System.out.println("Funcion√°rio: " + rs.getString("funcionario"));
                    System.out.println("EPI: " + rs.getString("epi"));
                    System.out.println("Data do Empr√©stimo: " + rs.getDate("data_emprestimo"));
                    System.out.println("Data de Devolu√ß√£o Prevista: " + rs.getDate("data_devolucao_prevista"));

                    Date dataDevolucaoReal = rs.getDate("data_devolucao_real");
                    String devolucaoRealStr = dataDevolucaoReal != null ? dataDevolucaoReal.toString() : "N/A";
                    System.out.println("Data de Devolu√ß√£o Real: " + devolucaoRealStr);

                    System.out.println("Quantidade: " + rs.getInt("quantidade"));

                    String status = rs.getString("status");
                    String statusFormatado = status.equals("Ativo") ? VERDE + status + RESET : CIANO + status + RESET;
                    System.out.println("Status: " + statusFormatado);

                    // Verifica se est√° atrasado
                    if (status.equals("Ativo")) {
                        LocalDate hoje = LocalDate.now();
                        LocalDate dataPrevista = rs.getDate("data_devolucao_prevista").toLocalDate();

                        if (hoje.isAfter(dataPrevista)) {
                            long diasAtraso = hoje.toEpochDay() - dataPrevista.toEpochDay();
                            System.out.println(VERMELHO + "EMPR√âSTIMO ATRASADO! (" + diasAtraso + " dias)" + RESET);
                        }
                    }
                } else {
                    System.out.println(VERMELHO + "Empr√©stimo n√£o encontrado com o ID: " + id + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "ID inv√°lido! Digite um n√∫mero." + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Lista todos os empr√©stimos ativos no sistema
     */
    public static void listarEmprestimosAtivos() {
        System.out.println("\n" + AZUL + "--- EMPR√âSTIMOS ATIVOS ---" + RESET);
        String sql = "SELECT e.id, f.nome AS funcionario, ep.nome AS epi, e.data_emprestimo, " +
                "e.data_devolucao_prevista, e.quantidade " +
                "FROM emprestimo e " +
                "JOIN funcionario f ON e.id_funcionario = f.id " +
                "JOIN epi ep ON e.id_epi = ep.id " +
                "WHERE e.status = 'Ativo' " +
                "ORDER BY e.data_devolucao_prevista";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-20s %-20s %-15s %-20s %-10s%n",
                    "ID", "Funcion√°rio", "EPI", "Data Empr√©stimo", "Devolu√ß√£o Prevista", "Quantidade");
            System.out.println("--------------------------------------------------------------------------------");

            LocalDate hoje = LocalDate.now();

            while (rs.next()) {
                int id = rs.getInt("id");
                String funcionario = rs.getString("funcionario");
                String epi = rs.getString("epi");
                Date dataEmprestimo = rs.getDate("data_emprestimo");
                Date dataDevolucaoPrevista = rs.getDate("data_devolucao_prevista");
                int quantidade = rs.getInt("quantidade");

                // Verifica se est√° atrasado
                String statusData = "";
                if (hoje.isAfter(dataDevolucaoPrevista.toLocalDate())) {
                    long diasAtraso = hoje.toEpochDay() - dataDevolucaoPrevista.toLocalDate().toEpochDay();
                    statusData = VERMELHO + " (Atrasado: " + diasAtraso + " dias)" + RESET;
                } else if (hoje.plusDays(7).isAfter(dataDevolucaoPrevista.toLocalDate())) {
                    long diasRestantes = dataDevolucaoPrevista.toLocalDate().toEpochDay() - hoje.toEpochDay();
                    statusData = AMARELO + " (Vence em: " + diasRestantes + " dias)" + RESET;
                }

                System.out.printf("%-5d %-20s %-20s %-15s %-20s %-10d %s%n",
                        id, funcionario, epi, dataEmprestimo, dataDevolucaoPrevista, quantidade, statusData);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar empr√©stimos ativos: " + e.getMessage() + RESET);
        }
    }

    /**
     * Lista empr√©stimos que est√£o pr√≥ximos do vencimento (7 dias ou menos)
     */
    public static void listarEmprestimosProximosVencimento() {
        System.out.println("\n" + AZUL + "--- EMPR√âSTIMOS PR√ìXIMOS DO VENCIMENTO ---" + RESET);
        String sql = "SELECT e.id, f.nome AS funcionario, ep.nome AS epi, e.data_emprestimo, " +
                "e.data_devolucao_prevista, e.quantidade, " +
                "DATEDIFF(e.data_devolucao_prevista, CURDATE()) AS dias_restantes " +
                "FROM emprestimo e " +
                "JOIN funcionario f ON e.id_funcionario = f.id " +
                "JOIN epi ep ON e.id_epi = ep.id " +
                "WHERE e.status = 'Ativo' " +
                "AND DATEDIFF(e.data_devolucao_prevista, CURDATE()) BETWEEN 0 AND 7 " +
                "ORDER BY e.data_devolucao_prevista";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-20s %-20s %-15s %-20s %-10s %-15s%n",
                    "ID", "Funcion√°rio", "EPI", "Data Empr√©stimo", "Devolu√ß√£o Prevista", "Quantidade", "Dias Restantes");
            System.out.println("--------------------------------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String funcionario = rs.getString("funcionario");
                String epi = rs.getString("epi");
                Date dataEmprestimo = rs.getDate("data_emprestimo");
                Date dataDevolucaoPrevista = rs.getDate("data_devolucao_prevista");
                int quantidade = rs.getInt("quantidade");
                int diasRestantes = rs.getInt("dias_restantes");

                String statusDias = diasRestantes <= 0 ?
                        VERMELHO + "VENCIDO" + RESET :
                        AMARELO + diasRestantes + " dias" + RESET;

                System.out.printf("%-5d %-20s %-20s %-15s %-20s %-10d %-15s%n",
                        id, funcionario, epi, dataEmprestimo, dataDevolucaoPrevista, quantidade, statusDias);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar empr√©stimos pr√≥ximos do vencimento: " + e.getMessage() + RESET);
        }
    }

    // ========== M√âTODOS PARA DEVOLU√á√ïES ==========

    /**
     * Registra a devolu√ß√£o de um empr√©stimo
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void registrarDevolucao(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- REGISTRAR DEVOLU√á√ÉO ---" + RESET);

        try {
            // Listar empr√©stimos ativos
            System.out.println("\n" + AZUL + "EMPR√âSTIMOS ATIVOS:" + RESET);
            listarEmprestimosAtivos();

            System.out.print("\nDigite o ID do empr√©stimo: ");
            int idEmprestimo = scanner.nextInt();
            scanner.nextLine();

            LocalDate dataDevolucao = LocalDate.now();

            String sql = "UPDATE emprestimo SET data_devolucao_real = ?, status = 'Devolvido' WHERE id = ? AND status = 'Ativo'";

            try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {

                stmt.setString(1, dataDevolucao.toString());
                stmt.setInt(2, idEmprestimo);
                int linhasAfetadas = stmt.executeUpdate();

                if (linhasAfetadas > 0) {
                    // Recuperar quantidade e ID do EPI para atualizar o estoque
                    String sqlInfo = "SELECT id_epi, quantidade FROM emprestimo WHERE id = ?";
                    try (PreparedStatement stmtInfo = conexao.prepareStatement(sqlInfo)) {
                        stmtInfo.setInt(1, idEmprestimo);
                        ResultSet rs = stmtInfo.executeQuery();

                        if (rs.next()) {
                            int idEPI = rs.getInt("id_epi");
                            int quantidade = rs.getInt("quantidade");

                            // Atualizar estoque
                            atualizarEstoqueEPI(idEPI, quantidade);
                        }
                    }

                    System.out.println(VERDE + "Devolu√ß√£o registrada com sucesso!" + RESET);

                    // Verifica se houve atraso
                    String sqlAtraso = "SELECT DATEDIFF(?, data_devolucao_prevista) AS dias_atraso " +
                            "FROM emprestimo WHERE id = ?";
                    try (PreparedStatement stmtAtraso = conexao.prepareStatement(sqlAtraso)) {
                        stmtAtraso.setString(1, dataDevolucao.toString());
                        stmtAtraso.setInt(2, idEmprestimo);
                        ResultSet rsAtraso = stmtAtraso.executeQuery();

                        if (rsAtraso.next()) {
                            int diasAtraso = rsAtraso.getInt("dias_atraso");
                            if (diasAtraso > 0) {
                                System.out.println(VERMELHO + "ATEN√á√ÉO: Devolu√ß√£o com atraso de " + diasAtraso + " dias!" + RESET);
                            }
                        }
                    }
                } else {
                    System.out.println(VERMELHO + "Nenhum empr√©stimo ativo encontrado com o ID: " + idEmprestimo + RESET);
                }
            }
        } catch (Exception e) {
            System.out.println(VERMELHO + "Erro ao registrar devolu√ß√£o: " + e.getMessage() + RESET);
            scanner.nextLine();
        }
    }

    // ========== M√âTODOS PARA RELAT√ìRIOS ==========

    /**
     * Lista todos os EPIs dispon√≠veis (com quantidade > 0)
     */
    public static void listarEPIsDisponiveis() {
        System.out.println("\n" + AZUL + "--- EPIs DISPON√çVEIS ---" + RESET);
        String sql = "SELECT * FROM epi WHERE quantidade > 0 ORDER BY nome";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-30s %-20s %-15s %-10s%n", "ID", "Nome", "Descri√ß√£o", "Validade", "Quantidade");
            System.out.println("--------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                String descricao = rs.getString("descricao");
                Date validade = rs.getDate("validade");
                int quantidade = rs.getInt("quantidade");

                // Verifica se o EPI est√° pr√≥ximo da validade (30 dias ou menos)
                LocalDate hoje = LocalDate.now();
                LocalDate dataValidade = validade.toLocalDate();
                long diasRestantes = dataValidade.toEpochDay() - hoje.toEpochDay();

                String statusValidade = "";
                if (diasRestantes <= 0) {
                    statusValidade = VERMELHO + "VENCIDO" + RESET;
                } else if (diasRestantes <= 30) {
                    statusValidade = AMARELO + "Vence em " + diasRestantes + " dias" + RESET;
                }

                System.out.printf("%-5d %-30s %-20s %-15s %-10d %s%n",
                        id, nome, descricao, validade, quantidade, statusValidade);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar EPIs dispon√≠veis: " + e.getMessage() + RESET);
        }
    }

    /**
     * Lista todos os EPIs que est√£o emprestados
     */
    public static void listarEPIsEmprestados() {
        System.out.println("\n" + AZUL + "--- EPIs EMPRESTADOS ---" + RESET);
        String sql = "SELECT ep.id, ep.nome, ep.descricao, SUM(e.quantidade) AS total_emprestado " +
                "FROM epi ep " +
                "JOIN emprestimo e ON ep.id = e.id_epi " +
                "WHERE e.status = 'Ativo' " +
                "GROUP BY ep.id, ep.nome, ep.descricao " +
                "ORDER BY ep.nome";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-30s %-20s %-15s%n", "ID", "Nome", "Descri√ß√£o", "Quantidade Emprestada");
            System.out.println("----------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                String descricao = rs.getString("descricao");
                int totalEmprestado = rs.getInt("total_emprestado");

                System.out.printf("%-5d %-30s %-20s %-15d%n", id, nome, descricao, totalEmprestado);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao listar EPIs emprestados: " + e.getMessage() + RESET);
        }
    }

    /**
     * Mostra o hist√≥rico de empr√©stimos por funcion√°rio (com entrada do usu√°rio)
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void historicoEmprestimosPorFuncionario(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- HIST√ìRICO DE EMPR√âSTIMOS POR FUNCION√ÅRIO ---" + RESET);
        listarFuncionarios();

        System.out.print("\nDigite o ID do funcion√°rio: ");

        try {
            int idFuncionario = scanner.nextInt();
            scanner.nextLine();
            historicoEmprestimosPorFuncionario(idFuncionario);
        } catch (Exception e) {
            System.out.println(VERMELHO + "ID inv√°lido! Digite um n√∫mero." + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Mostra o hist√≥rico de empr√©stimos por funcion√°rio (sobrecarga)
     * @param idFuncionario ID do funcion√°rio
     */
    private static void historicoEmprestimosPorFuncionario(int idFuncionario) {
        String sql = "SELECT e.id, ep.nome AS epi, e.data_emprestimo, e.data_devolucao_prevista, " +
                "e.data_devolucao_real, e.quantidade, e.status, " +
                "DATEDIFF(IFNULL(e.data_devolucao_real, CURDATE()), e.data_devolucao_prevista) AS dias_atraso " +
                "FROM emprestimo e " +
                "JOIN epi ep ON e.id_epi = ep.id " +
                "WHERE e.id_funcionario = ? " +
                "ORDER BY e.data_emprestimo DESC";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idFuncionario);
            ResultSet rs = stmt.executeQuery();

            System.out.println("\n" + AZUL + "HIST√ìRICO DE EMPR√âSTIMOS:" + RESET);
            System.out.printf("%-5s %-20s %-15s %-20s %-20s %-10s %-10s %-15s%n",
                    "ID", "EPI", "Data Empr√©stimo", "Devolu√ß√£o Prevista",
                    "Devolu√ß√£o Real", "Quantidade", "Status", "Atraso");
            System.out.println("----------------------------------------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String epi = rs.getString("epi");
                Date dataEmprestimo = rs.getDate("data_emprestimo");
                Date dataDevolucaoPrevista = rs.getDate("data_devolucao_prevista");
                Date dataDevolucaoReal = rs.getDate("data_devolucao_real");
                int quantidade = rs.getInt("quantidade");
                String status = rs.getString("status");
                int diasAtraso = rs.getInt("dias_atraso");

                // Formata o status com cores
                String statusFormatado = status.equals("Ativo") ? VERDE + status + RESET : CIANO + status + RESET;

                // Formata o atraso
                String atrasoFormatado = "";
                if (diasAtraso > 0) {
                    atrasoFormatado = VERMELHO + diasAtraso + " dias" + RESET;
                } else if (status.equals("Ativo") && diasAtraso < 0) {
                    atrasoFormatado = AMARELO + "Faltam " + (-diasAtraso) + " dias" + RESET;
                }

                System.out.printf("%-5d %-20s %-15s %-20s %-20s %-10d %-10s %-15s%n",
                        id, epi, dataEmprestimo, dataDevolucaoPrevista,
                        dataDevolucaoReal != null ? dataDevolucaoReal : "N/A",
                        quantidade, statusFormatado, atrasoFormatado);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao buscar hist√≥rico: " + e.getMessage() + RESET);
        }
    }

    /**
     * Mostra o hist√≥rico de empr√©stimos por EPI (com entrada do usu√°rio)
     * @param scanner Objeto Scanner para entrada de dados
     */
    public static void historicoEmprestimosPorEPI(Scanner scanner) {
        System.out.println("\n" + AZUL + "--- HIST√ìRICO DE EMPR√âSTIMOS POR EPI ---" + RESET);
        listarEPIs();

        System.out.print("\nDigite o ID do EPI: ");

        try {
            int idEPI = scanner.nextInt();
            scanner.nextLine();
            historicoEmprestimosPorEPI(idEPI);
        } catch (Exception e) {
            System.out.println(VERMELHO + "ID inv√°lido! Digite um n√∫mero." + RESET);
            scanner.nextLine();
        }
    }

    /**
     * Mostra o hist√≥rico de empr√©stimos por EPI (sobrecarga)
     * @param idEPI ID do EPI
     */
    private static void historicoEmprestimosPorEPI(int idEPI) {
        String sql = "SELECT e.id, f.nome AS funcionario, e.data_emprestimo, e.data_devolucao_prevista, " +
                "e.data_devolucao_real, e.quantidade, e.status, " +
                "DATEDIFF(IFNULL(e.data_devolucao_real, CURDATE()), e.data_devolucao_prevista) AS dias_atraso " +
                "FROM emprestimo e " +
                "JOIN funcionario f ON e.id_funcionario = f.id " +
                "WHERE e.id_epi = ? " +
                "ORDER BY e.data_emprestimo DESC";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idEPI);
            ResultSet rs = stmt.executeQuery();

            System.out.println("\n" + AZUL + "HIST√ìRICO DE EMPR√âSTIMOS:" + RESET);
            System.out.printf("%-5s %-20s %-15s %-20s %-20s %-10s %-10s %-15s%n",
                    "ID", "Funcion√°rio", "Data Empr√©stimo", "Devolu√ß√£o Prevista",
                    "Devolu√ß√£o Real", "Quantidade", "Status", "Atraso");
            System.out.println("----------------------------------------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String funcionario = rs.getString("funcionario");
                Date dataEmprestimo = rs.getDate("data_emprestimo");
                Date dataDevolucaoPrevista = rs.getDate("data_devolucao_prevista");
                Date dataDevolucaoReal = rs.getDate("data_devolucao_real");
                int quantidade = rs.getInt("quantidade");
                String status = rs.getString("status");
                int diasAtraso = rs.getInt("dias_atraso");

                // Formata o status com cores
                String statusFormatado = status.equals("Ativo") ? VERDE + status + RESET : CIANO + status + RESET;

                // Formata o atraso
                String atrasoFormatado = "";
                if (diasAtraso > 0) {
                    atrasoFormatado = VERMELHO + diasAtraso + " dias" + RESET;
                } else if (status.equals("Ativo") && diasAtraso < 0) {
                    atrasoFormatado = AMARELO + "Faltam " + (-diasAtraso) + " dias" + RESET;
                }

                System.out.printf("%-5d %-20s %-15s %-20s %-20s %-10d %-10s %-15s%n",
                        id, funcionario, dataEmprestimo, dataDevolucaoPrevista,
                        dataDevolucaoReal != null ? dataDevolucaoReal : "N/A",
                        quantidade, statusFormatado, atrasoFormatado);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao buscar hist√≥rico: " + e.getMessage() + RESET);
        }
    }

    /**
     * Verifica e lista EPIs que est√£o pr√≥ximos da validade (30 dias ou menos)
     */
    public static void verificarEPIsProximosValidade() {
        System.out.println("\n" + AZUL + "--- EPIs COM VALIDADE PR√ìXIMA (30 dias ou menos) ---" + RESET);
        String sql = "SELECT id, nome, descricao, validade, quantidade, " +
                "DATEDIFF(validade, CURDATE()) AS dias_restantes " +
                "FROM epi " +
                "WHERE validade BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY) " +
                "ORDER BY validade";

        try (Connection conexao = DriverManager.getConnection(URL, USUARIO, SENHA);
             Statement stmt = conexao.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-5s %-30s %-20s %-15s %-10s %-15s%n",
                    "ID", "Nome", "Descri√ß√£o", "Validade", "Quantidade", "Dias Restantes");
            System.out.println("----------------------------------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                String descricao = rs.getString("descricao");
                Date validade = rs.getDate("validade");
                int quantidade = rs.getInt("quantidade");
                int diasRestantes = rs.getInt("dias_restantes");

                String statusDias = diasRestantes <= 7 ?
                        VERMELHO + diasRestantes + " dias" + RESET :
                        AMARELO + diasRestantes + " dias" + RESET;

                System.out.printf("%-5d %-30s %-20s %-15s %-10d %-15s%n",
                        id, nome, descricao, validade, quantidade, statusDias);
            }
        } catch (SQLException e) {
            System.err.println(VERMELHO + "Erro ao verificar EPIs pr√≥ximos da validade: " + e.getMessage() + RESET);
        }
    }
}
